pipeline{
    agent any

    environment{
        CONTAINER_NAME = "sapier-front-container"
        IMAGE_NAME = "sapier-front-image"
    }

    stages{
        stage('Checkout'){
            steps{
                //Jenkins의 SCM 플러그인 사용하여 Git 저장소로부터 소스코드 가져옴
                checkout scm
                sh 'echo "git clone 완료"'
                sh 'echo "현재 디렉토리 경로"'
                sh 'pwd'
            }
        }

        stage('Docker Delete'){
            steps{
                script{
                    try{
                        sh 'echo "Docker Delete Start"'
                        sh 'docker ps'
                        //컨테이너 존재 시 삭제
                        sh 'docker stop ${CONTAINER_NAME}'
                        sh 'docker rm -f ${CONTAINER_NAME}'
                    } catch(Exception e){
                        echo 'Docker container ${CONTAINER_NAME} does not exist. skip'
                    }
                    try{
                        //이미지 존재 시 삭제
                        sh 'docker image rm ${IMAGE_NAME}'
                    } catch(Exception e){
                        echo 'Docker image ${IMAGE_NAME} does not exist. skip'
                    }
                }
            }
        }

        stage('Build'){
            steps{
                script{
                    //현재 디렉토리의 파일 및 디렉토리 목록 출력
                    sh 'ls'
                    dir('frontend/sapier'){
                        //변경된 디렉토리에서 명령어 실행
                        sh 'ls'
                        sh 'echo "Hello from the changed directory"'
                        sh 'docker build -t ${IMAGE_NAME} -f Dockerfile .'
                        sh 'docker images'
                        sh 'echo "images build 성공"'
                    }
                }
            }
        }
        stage('Deploy'){
            steps{
                sh 'echo "현재 올라간 컨테이너들"'
                sh 'docker ps'
                sh 'docker run -d --name ${CONTAINER_NAME} -p 3000:80 ${IMAGE_NAME}'
                sh 'docker ps'
            }
        }
    }
}